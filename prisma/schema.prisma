generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  email               String   @unique
  name                String
  image               String?
  mobile              Int?
  address             String?
  bio                 String?
  password            String
  confirmed           Boolean  @default(false)
  blocked             Boolean  @default(false)
  resetPasswordToken  String?
  resetPasswordExpire BigInt?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  role         Role          @relation(fields: [roleId], references: [id], onDelete: Restrict)
  roleId       String
  donors       Donor[]
  accounts     Account[]
  transactions Transaction[]

  @@map("users")
}

model Role {
  id          String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  name        String   @unique
  type        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users             User[]
  permissions       Permission[]
  clientPermissions ClientPermission[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  name        String
  method      Method
  route       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  role Role[]

  @@unique([method, route])
  @@map("permissions")
}

model ClientPermission {
  id          String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  name        String   @unique
  sort        Int
  menu        String
  path        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  role Role[]

  @@map("client_permissions")
}

model Donor {
  id        String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  name      String
  sex       Sex
  country   String
  mobile    String
  balance   Float?   @default(0)
  status    Status   @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy    User          @relation(fields: [createdById], references: [id], onDelete: Restrict)
  createdById  String
  transactions Transaction[]

  @@map("dotors")
}

model Account {
  id          String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  name        String
  description String?
  balance     Float    @default(0)
  period      Period
  status      Status   @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy    User          @relation(fields: [createdById], references: [id], onDelete: Restrict)
  createdById  String
  transactions Transaction[]

  @@map("accounts")
}

model Transaction {
  id            String          @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  type          TransactionType
  amount        Float           @default(0)
  reference     String?
  description   String
  status        Status          @default(ACTIVE)
  paymentStatus PaymentStatus?

  activeAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Restrict)
  createdById String

  account   Account? @relation(fields: [accountId], references: [id], onDelete: Restrict)
  accountId String?

  donor   Donor?  @relation(fields: [donorId], references: [id], onDelete: Restrict)
  donorId String?

  @@map("transactions")
}

enum Method {
  GET
  POST
  PUT
  DELETE
}

enum Sex {
  MALE
  FEMALE
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
}

enum PaymentStatus {
  PAID
  UNPAID
}

enum TransactionType {
  EXPENSE
  DEPOSIT
  OPENING_BALANCE
}

enum Period {
  MONTHLY
  YEARLY
}
